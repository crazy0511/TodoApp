{"ast":null,"code":"import { Todo } from '../models/todo.model';\nimport { BehaviorSubject } from 'rxjs';\nimport { Filter } from '../models/filter.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nexport class TodoService {\n  // Cập nhật dữ liệu Todo[] và length\n  updateTodosData() {\n    // Phát ra một sự kiện (event) để thông báo rằng \n    // Danh sách các \"todo\" đã được cập nhật\n    this.displayTodosSubject.next(this.filterTodos);\n    // Số lượng \"to-do\" đã thay đổi\n    this.lengthSubject.next(this.todos.length);\n  }\n  constructor(storageService) {\n    this.storageService = storageService;\n    this.lengthSubject = new BehaviorSubject(0);\n    this.displayTodosSubject = new BehaviorSubject([]);\n    // currentFilter = Filter.All\n    this.currentFilter = Filter.All;\n    // asObservable chỉ dùng để xem\n    // todo$ = displayTodosSubject\n    this.todo$ = this.displayTodosSubject.asObservable();\n    // length$ = lengthSubject\n    this.length$ = this.lengthSubject.asObservable();\n  }\n  // Lấy tất cả todo từ LocalStorage\n  fetchFromLocalStorage() {\n    // Lấy Todo[] từ localStorage\n    this.todos = this.storageService.getValue(TodoService.TodoStorageKey) || [];\n    console.log(this.todos);\n    // filterTodos = todos\n    // thay đổi giá trị của mảng this.todos thì mảng this.filterTodos sẽ cập nhật theo\n    this.filterTodos = [...this.todos];\n    this.updateTodosData();\n  }\n  // Toggle all todos\n  toggleAll() {\n    // duyệt tất cả các todo có trong todos\n    this.todos = this.todos.map(todo => {\n      return {\n        ...todo,\n        // Nếu tất cả đều đúng thì isCompleted = false\n        // Nếu tất cả đểu sai thì isCompeted = true\n        // Nếu 1 vài đúng thì isCompleted = true;\n        isCompleted: !this.todos.every(t => t.isCompleted)\n      };\n    });\n    console.log('Toggle all', this.todos);\n    this.updateToLocalStorage();\n  }\n  // Add data\n  addTodo(content) {\n    // Khởi tại id từ date\n    const date = new Date(Date.now()).getTime();\n    // Tạo newTodo \n    const newTodo = new Todo(date, content);\n    // push newTodo vào todos\n    this.todos.push(newTodo);\n    // thực update data trong local storage\n    this.updateToLocalStorage();\n  }\n  // Update data\n  updateToLocalStorage() {\n    // Gọi hàm setObject từ LocalStorageService\n    this.storageService.setObject(TodoService.TodoStorageKey, this.todos);\n    // Gọi hàm filterTodo truyền vào \n    // filter = this.currentFilter, isFiltering = false;\n    this.filterTodo(this.currentFilter, false);\n    this.updateTodosData();\n  }\n  filterTodo(filter, isFiltering = true) {\n    this.currentFilter = filter;\n    switch (filter) {\n      // TH1: filter = Filter.Active\n      case Filter.Active:\n        // filterTodos gồm todo thỏa mãn isComplelted = false\n        this.filterTodos = this.todos.filter(todo => !todo.isCompleted);\n        break;\n      // TH2: filter = Filter.Completed\n      case Filter.Completed:\n        // filterTodos gồm todo thỏa mãn isComplelted = true\n        this.filterTodos = this.todos.filter(todo => todo.isCompleted);\n        break;\n      // TH2: filter = Filter.All\n      case Filter.All:\n        this.filterTodos = [...this.todos];\n        break;\n    }\n    // Nếu isFiltering = true thì Cập nhật dữ liệu Todo[] và length\n    if (isFiltering) {\n      this.updateTodosData();\n    }\n  }\n  editTodo(id, content) {\n    const index = this.todos.findIndex(t => t.id === id);\n    const todo = this.todos[index];\n    todo.content = content;\n    this.todos.splice(index, 1, todo);\n    this.updateToLocalStorage();\n  }\n  deleteTodo(id) {\n    const index = this.todos.findIndex(t => t.id === id);\n    this.todos.splice(index, 1);\n    this.updateToLocalStorage();\n  }\n  // Thay đổi trang thái \n  changeTodoStatus(id, isCompleted) {\n    const index = this.todos.findIndex(t => t.id === id);\n    const todo = this.todos[index];\n    todo.isCompleted = isCompleted;\n    // Thay đổi index thành todo mới\n    this.todos.splice(index, 1, todo);\n    this.updateToLocalStorage();\n  }\n  clearCompleted() {\n    this.todos = this.todos.filter(todo => !todo.isCompleted);\n    this.updateToLocalStorage();\n  }\n}\n// Lấy ra các key trong LocalStorage\n// Được sử dụng để lưu trữ tên key để truy cập dữ liệu \"to-do\" trong localStorage\nTodoService.TodoStorageKey = \"todos\";\nTodoService.ɵfac = function TodoService_Factory(t) {\n  return new (t || TodoService)(i0.ɵɵinject(i1.LocalStorageService));\n};\nTodoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoService,\n  factory: TodoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Todo","BehaviorSubject","Filter","TodoService","updateTodosData","displayTodosSubject","next","filterTodos","lengthSubject","todos","length","constructor","storageService","currentFilter","All","todo$","asObservable","length$","fetchFromLocalStorage","getValue","TodoStorageKey","console","log","toggleAll","map","todo","isCompleted","every","t","updateToLocalStorage","addTodo","content","date","Date","now","getTime","newTodo","push","setObject","filterTodo","filter","isFiltering","Active","Completed","editTodo","id","index","findIndex","splice","deleteTodo","changeTodoStatus","clearCompleted","i0","ɵɵinject","i1","LocalStorageService","factory","ɵfac","providedIn"],"sources":["D:\\Data\\TTS_Angular\\ToDoApp\\angular_todoapp\\src\\app\\services\\todo.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Todo } from '../models/todo.model';\nimport { BehaviorSubject, Observable, ObservableLike } from 'rxjs';\nimport { Filter } from '../models/filter.model';\nimport { LocalStorageService } from './local-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService{\n\n  // Lấy ra các key trong LocalStorage\n  // Được sử dụng để lưu trữ tên key để truy cập dữ liệu \"to-do\" trong localStorage\n  private static readonly TodoStorageKey = \"todos\";\n\n  private todos!: Todo[];\n  // Mảng filterTodos\n  private filterTodos!: Todo[];\n  private lengthSubject: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n  private displayTodosSubject: BehaviorSubject<Todo[]> = new BehaviorSubject<Todo[]>([]);\n  // currentFilter = Filter.All\n  private currentFilter: Filter = Filter.All;\n\n  // asObservable chỉ dùng để xem\n  // todo$ = displayTodosSubject\n  public todo$: Observable<Todo[]> = this.displayTodosSubject.asObservable();\n  // length$ = lengthSubject\n  public length$: Observable<number> = this.lengthSubject.asObservable();\n\n  // Cập nhật dữ liệu Todo[] và length\n  private updateTodosData(){\n    // Phát ra một sự kiện (event) để thông báo rằng \n    // Danh sách các \"todo\" đã được cập nhật\n    this.displayTodosSubject.next(this.filterTodos);\n    // Số lượng \"to-do\" đã thay đổi\n    this.lengthSubject.next(this.todos.length);\n  }\n\n  constructor(private storageService: LocalStorageService) {  }\n\n  // Lấy tất cả todo từ LocalStorage\n  fetchFromLocalStorage(){\n    // Lấy Todo[] từ localStorage\n    this.todos = this.storageService.getValue<Todo[]>(TodoService.TodoStorageKey) || [];\n    console.log(this.todos);\n\n    // filterTodos = todos\n    // thay đổi giá trị của mảng this.todos thì mảng this.filterTodos sẽ cập nhật theo\n    this.filterTodos = [...this.todos];\n    this.updateTodosData();\n  }\n\n  // Toggle all todos\n  toggleAll(){\n    // duyệt tất cả các todo có trong todos\n    this.todos = this.todos.map(todo =>{\n      return {\n        ...todo,\n        // Nếu tất cả đều đúng thì isCompleted = false\n        // Nếu tất cả đểu sai thì isCompeted = true\n        // Nếu 1 vài đúng thì isCompleted = true;\n        isCompleted: !this.todos.every(t => t.isCompleted)\n      }\n    });\n    console.log('Toggle all', this.todos);\n    this.updateToLocalStorage();\n  }\n\n  // Add data\n  addTodo(content: string){\n    // Khởi tại id từ date\n    const date = new Date(Date.now()).getTime();\n    // Tạo newTodo \n    const newTodo = new Todo(date, content);\n    // push newTodo vào todos\n    this.todos.push(newTodo);\n    // thực update data trong local storage\n    this.updateToLocalStorage();\n  }\n\n  // Update data\n  updateToLocalStorage(){\n    // Gọi hàm setObject từ LocalStorageService\n    this.storageService.setObject(TodoService.TodoStorageKey, this.todos);\n    \n    // Gọi hàm filterTodo truyền vào \n    // filter = this.currentFilter, isFiltering = false;\n    this.filterTodo(this.currentFilter, false);\n    this.updateTodosData();\n  }\n\n  filterTodo(filter: Filter, isFiltering: boolean = true){\n    this.currentFilter = filter;\n    switch(filter){\n      // TH1: filter = Filter.Active\n      case Filter.Active:\n        // filterTodos gồm todo thỏa mãn isComplelted = false\n        this.filterTodos = this.todos.filter(todo => !todo.isCompleted);\n        break;\n\n      // TH2: filter = Filter.Completed\n      case Filter.Completed:\n        // filterTodos gồm todo thỏa mãn isComplelted = true\n        this.filterTodos = this.todos.filter(todo => todo.isCompleted);\n        break;\n\n      // TH2: filter = Filter.All\n      case Filter.All:\n        this.filterTodos = [...this.todos];\n        break;\n    }\n\n    // Nếu isFiltering = true thì Cập nhật dữ liệu Todo[] và length\n    if(isFiltering){\n      this.updateTodosData();\n    }\n  }\n\n\n  editTodo(id: number, content: string){\n    const index = this.todos.findIndex(t => t.id === id);\n    const todo = this.todos[index];\n    todo.content = content;\n    this.todos.splice(index, 1, todo);\n    this.updateToLocalStorage();\n  }\n\n  deleteTodo(id: number){\n    const index = this.todos.findIndex(t => t.id === id);\n    this.todos.splice(index, 1);\n    this.updateToLocalStorage();\n  }\n\n\n  // Thay đổi trang thái \n  changeTodoStatus(id: number, isCompleted: boolean){\n    const index = this.todos.findIndex(t => t.id === id);\n    const todo = this.todos[index];\n    todo.isCompleted = isCompleted;\n    // Thay đổi index thành todo mới\n    this.todos.splice(index, 1, todo);\n    this.updateToLocalStorage();\n  }\n\n\n\n\n\n  clearCompleted(){\n    this.todos = this.todos.filter(todo => !todo.isCompleted);\n    this.updateToLocalStorage();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}