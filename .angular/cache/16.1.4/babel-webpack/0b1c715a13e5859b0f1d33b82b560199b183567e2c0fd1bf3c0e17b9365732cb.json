{"ast":null,"code":"import { Todo } from '../models/todo.model';\nimport { BehaviorSubject } from 'rxjs';\nimport { Filter } from '../models/filter.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nexport class TodoService {\n  // Cập nhật dữ liệu Todo[] và length\n  updateTodosData() {\n    // Phát ra một sự kiện (event) để thông báo rằng \n    // Danh sách các \"todo\" đã được cập nhật\n    this.displayTodosSubject.next(this.filterTodos);\n    // Số lượng \"to-do\" đã thay đổi\n    this.lengthSubject.next(this.todos.length);\n  }\n  constructor(storageService) {\n    this.storageService = storageService;\n    this.lengthSubject = new BehaviorSubject(0);\n    this.displayTodosSubject = new BehaviorSubject([]);\n    // asObservable chỉ dùng để xem\n    // todo$ = displayTodosSubject\n    this.todo$ = this.displayTodosSubject.asObservable();\n    // length$ = lengthSubject\n    this.length$ = this.lengthSubject.asObservable();\n  }\n  // Lấy tất cả todo từ LocalStorage\n  fetchFromLocalStorage() {\n    // Lấy all Todo[] từ localStorage\n    this.todos = this.storageService.getValue(TodoService.TodoStorageKey) || [];\n    // getValue<T>(key:string): T{\n    //  const obj = JSON.parse(this.storage[key] || null);\n    //  return <T>obj;\n    // }\n    console.log('Todos', this.todos);\n    // filterTodos = todos\n    // thay đổi giá trị của mảng this.todos thì mảng this.filterTodos sẽ cập nhật theo\n    this.filterTodos = [...this.todos];\n    this.updateTodosData();\n    // private updateTodosData(){\n    //  //displayTodosSubject, lengthSubject là ehaviorSubject\n    //  this.displayTodosSubject.next(this.filterTodos);\n    //  this.lengthSubject.next(this.todos.length);\n    // }\n  }\n  // Toggle all todos\n  toggleAll() {\n    // duyệt tất cả các todo có trong todos\n    this.todos = this.todos.map(todo => {\n      return {\n        ...todo,\n        // Nếu tất cả đều đúng thì isCompleted = false\n        // Nếu tất cả đểu sai thì isCompeted = true\n        // Nếu 1 vài đúng thì isCompleted = true;\n        isCompleted: !this.todos.every(t => t.isCompleted)\n      };\n    });\n    console.log('Toggle all', this.todos);\n    this.updateToLocalStorage();\n  }\n  // Add data\n  addTodo(content) {\n    // Khởi tại id từ date\n    const date = new Date(Date.now()).getTime();\n    // Tạo newTodo \n    const newTodo = new Todo(date, content);\n    // push newTodo vào todos\n    this.todos.push(newTodo);\n    // thực update data trong local storage\n    console.log('add', this.todos);\n    this.updateToLocalStorage();\n  }\n  // Update data\n  updateToLocalStorage() {\n    // Gọi hàm setObject từ LocalStorageService\n    this.storageService.setObject(TodoService.TodoStorageKey, this.todos);\n    // Gọi hàm filterTodo truyền vào \n    // filter = this.currentFilter, isFiltering = false;\n    this.filterTodo(this.currentFilter, false);\n    // Cập nhật dữ liệu Todo[] và length\n    this.updateTodosData();\n  }\n  // truyền vào filter = type\n  filterTodo(filter, isFiltering = true) {\n    this.currentFilter = filter;\n    console.log('Filter gần đây nhất', this.currentFilter);\n    switch (filter) {\n      // TH1: filter = Filter.Active\n      case Filter.Active:\n        // filterTodos gồm todo thỏa mãn isComplelted = false\n        this.filterTodos = this.todos.filter(todo => !todo.isCompleted);\n        break;\n      // TH2: filter = Filter.Completed\n      case Filter.Completed:\n        // filterTodos gồm todo thỏa mãn isComplelted = true\n        this.filterTodos = this.todos.filter(todo => todo.isCompleted);\n        break;\n      // TH2: filter = Filter.All\n      case Filter.All:\n        this.filterTodos = [...this.todos];\n        break;\n    }\n    console.log('currentFilter', this.currentFilter);\n    // Nếu isFiltering = true thì Cập nhật dữ liệu Todo[] và length\n    if (isFiltering) {\n      this.updateTodosData();\n    }\n    console.log('isFiltering', isFiltering);\n  }\n  // Thay đổi trang thái \n  changeTodoStatus(id, isCompleted) {\n    // Tìm todo có id tương ứng\n    const index = this.todos.findIndex(t => t.id === id);\n    console.log('index', index);\n    // gọi todo có index cần tìm\n    const todo = this.todos[index];\n    console.log('todo cần tìm', todo);\n    // gán lại isComppleted cho todo\n    todo.isCompleted = isCompleted;\n    // index: vị trí bắt đầu thêm phần tử\n    // 1: 1 phần tử bị xóa từ vị trí index\n    // todo: phần tử được thêm vào mảng\n    // Xóa todo cũ thêm vào todo mới tại đúng vị trí đó\n    this.todos.splice(index, 1, todo);\n    // Thực hiện update Local Storage\n    this.updateToLocalStorage();\n  }\n  // Thay đổi Todo\n  editTodo(id, content) {\n    // Tìm index có id cần tìm\n    const index = this.todos.findIndex(t => t.id === id);\n    // Tìm todo có index tương ứng\n    const todo = this.todos[index];\n    // Tháy đổi content\n    todo.content = content;\n    // Tại vị trí thứ index \n    // Xóa 1 phần tử bắt đầu từ index\n    // Thêm todo vào đó\n    this.todos.splice(index, 1, todo);\n    // update đến LocalStorage\n    this.updateToLocalStorage();\n  }\n  // Xóa todo\n  deleteTodo(id) {\n    // Tìm index có id đã cho\n    const index = this.todos.findIndex(t => t.id === id);\n    // Xóa đi todo tại vị trí index\n    this.todos.splice(index, 1);\n    this.updateToLocalStorage();\n  }\n  //Xóa todo item đã completed\n  clearCompleted() {\n    // Tìm todo thỏa mãn isComleted = false \n    this.todos = this.todos.filter(todo => !todo.isCompleted);\n    this.updateToLocalStorage();\n  }\n}\n// Lấy ra các key trong LocalStorage\n// Được sử dụng để lưu trữ tên key để truy cập dữ liệu \"to-do\" trong localStorage\nTodoService.TodoStorageKey = \"todos\";\nTodoService.ɵfac = function TodoService_Factory(t) {\n  return new (t || TodoService)(i0.ɵɵinject(i1.LocalStorageService));\n};\nTodoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoService,\n  factory: TodoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Todo","BehaviorSubject","Filter","TodoService","updateTodosData","displayTodosSubject","next","filterTodos","lengthSubject","todos","length","constructor","storageService","todo$","asObservable","length$","fetchFromLocalStorage","getValue","TodoStorageKey","console","log","toggleAll","map","todo","isCompleted","every","t","updateToLocalStorage","addTodo","content","date","Date","now","getTime","newTodo","push","setObject","filterTodo","currentFilter","filter","isFiltering","Active","Completed","All","changeTodoStatus","id","index","findIndex","splice","editTodo","deleteTodo","clearCompleted","i0","ɵɵinject","i1","LocalStorageService","factory","ɵfac","providedIn"],"sources":["D:\\Data\\TTS_Angular\\ToDoApp\\angular_todoapp\\src\\app\\services\\todo.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Todo } from '../models/todo.model';\nimport { BehaviorSubject, Observable, ObservableLike } from 'rxjs';\nimport { Filter } from '../models/filter.model';\nimport { LocalStorageService } from './local-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService{\n\n  // Lấy ra các key trong LocalStorage\n  // Được sử dụng để lưu trữ tên key để truy cập dữ liệu \"to-do\" trong localStorage\n  private static readonly TodoStorageKey = \"todos\";\n\n  private todos!: Todo[];\n  // Mảng filterTodos\n  private filterTodos!: Todo[];\n  private lengthSubject: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n  private displayTodosSubject: BehaviorSubject<Todo[]> = new BehaviorSubject<Todo[]>([]);\n  // currentFilter = Filter.All\n  private currentFilter!: Filter;\n\n  // asObservable chỉ dùng để xem\n  // todo$ = displayTodosSubject\n  public todo$: Observable<Todo[]> = this.displayTodosSubject.asObservable();\n  // length$ = lengthSubject\n  public length$: Observable<number> = this.lengthSubject.asObservable();\n\n  // Cập nhật dữ liệu Todo[] và length\n  private updateTodosData(){\n    // Phát ra một sự kiện (event) để thông báo rằng \n    // Danh sách các \"todo\" đã được cập nhật\n    this.displayTodosSubject.next(this.filterTodos);\n    // Số lượng \"to-do\" đã thay đổi\n    this.lengthSubject.next(this.todos.length);\n  }\n\n  constructor(private storageService: LocalStorageService) {  }\n\n  // Lấy tất cả todo từ LocalStorage\n  fetchFromLocalStorage(){\n    // Lấy all Todo[] từ localStorage\n    this.todos = this.storageService.getValue<Todo[]>(TodoService.TodoStorageKey) || [];\n\n    // getValue<T>(key:string): T{\n    //  const obj = JSON.parse(this.storage[key] || null);\n    //  return <T>obj;\n    // }\n    console.log('Todos', this.todos);\n\n    // filterTodos = todos\n    // thay đổi giá trị của mảng this.todos thì mảng this.filterTodos sẽ cập nhật theo\n    this.filterTodos = [...this.todos];\n    this.updateTodosData();\n\n    // private updateTodosData(){\n    //  //displayTodosSubject, lengthSubject là ehaviorSubject\n    //  this.displayTodosSubject.next(this.filterTodos);\n    //  this.lengthSubject.next(this.todos.length);\n    // }\n  }\n\n  // Toggle all todos\n  toggleAll(){\n    // duyệt tất cả các todo có trong todos\n    this.todos = this.todos.map(todo =>{\n      return {\n        ...todo,\n        // Nếu tất cả đều đúng thì isCompleted = false\n        // Nếu tất cả đểu sai thì isCompeted = true\n        // Nếu 1 vài đúng thì isCompleted = true;\n        isCompleted: !this.todos.every(t => t.isCompleted)\n      }\n    });\n    console.log('Toggle all', this.todos);\n    this.updateToLocalStorage();\n  }\n\n  // Add data\n  addTodo(content: string){\n    // Khởi tại id từ date\n    const date = new Date(Date.now()).getTime();\n    // Tạo newTodo \n    const newTodo = new Todo(date, content);\n    // push newTodo vào todos\n    this.todos.push(newTodo);\n    // thực update data trong local storage\n    console.log('add',this.todos);\n    this.updateToLocalStorage();\n  }\n\n  // Update data\n  updateToLocalStorage(){\n    // Gọi hàm setObject từ LocalStorageService\n    this.storageService.setObject(TodoService.TodoStorageKey, this.todos);\n    \n    // Gọi hàm filterTodo truyền vào \n    // filter = this.currentFilter, isFiltering = false;\n    this.filterTodo(this.currentFilter, false);\n\n    // Cập nhật dữ liệu Todo[] và length\n    this.updateTodosData();\n  }\n\n  // truyền vào filter = type\n  filterTodo(filter: Filter, isFiltering: boolean = true){\n    this.currentFilter = filter;\n    console.log('Filter gần đây nhất', this.currentFilter);\n    switch(filter){\n      // TH1: filter = Filter.Active\n      case Filter.Active:\n        // filterTodos gồm todo thỏa mãn isComplelted = false\n        this.filterTodos = this.todos.filter(todo => !todo.isCompleted);\n        break;\n\n      // TH2: filter = Filter.Completed\n      case Filter.Completed:\n        // filterTodos gồm todo thỏa mãn isComplelted = true\n        this.filterTodos = this.todos.filter(todo => todo.isCompleted);\n        break;\n\n      // TH2: filter = Filter.All\n      case Filter.All:\n        this.filterTodos = [...this.todos];\n        break;\n    }\n    console.log('currentFilter',this.currentFilter);\n\n    // Nếu isFiltering = true thì Cập nhật dữ liệu Todo[] và length\n    if(isFiltering){\n      this.updateTodosData();\n    }\n    console.log('isFiltering', isFiltering);\n  }\n\n  // Thay đổi trang thái \n  changeTodoStatus(id: number, isCompleted: boolean){\n    // Tìm todo có id tương ứng\n    const index = this.todos.findIndex(t => t.id === id);\n    console.log('index', index);\n\n    // gọi todo có index cần tìm\n    const todo = this.todos[index];\n    console.log('todo cần tìm', todo);\n\n    // gán lại isComppleted cho todo\n    todo.isCompleted = isCompleted;\n    // index: vị trí bắt đầu thêm phần tử\n    // 1: 1 phần tử bị xóa từ vị trí index\n    // todo: phần tử được thêm vào mảng\n    // Xóa todo cũ thêm vào todo mới tại đúng vị trí đó\n    this.todos.splice(index, 1, todo);\n    // Thực hiện update Local Storage\n    this.updateToLocalStorage();\n  }\n\n  // Thay đổi Todo\n  editTodo(id: number, content: string){\n    // Tìm index có id cần tìm\n    const index = this.todos.findIndex(t => t.id === id);\n    // Tìm todo có index tương ứng\n    const todo = this.todos[index];\n    // Tháy đổi content\n    todo.content = content;\n    // Tại vị trí thứ index \n    // Xóa 1 phần tử bắt đầu từ index\n    // Thêm todo vào đó\n    this.todos.splice(index, 1, todo);\n    // update đến LocalStorage\n    this.updateToLocalStorage();\n  }\n\n  // Xóa todo\n  deleteTodo(id: number){\n    // Tìm index có id đã cho\n    const index = this.todos.findIndex(t => t.id === id);\n    // Xóa đi todo tại vị trí index\n    this.todos.splice(index, 1);\n    this.updateToLocalStorage();\n  }\n\n  //Xóa todo item đã completed\n  clearCompleted(){\n    // Tìm todo thỏa mãn isComleted = false \n    this.todos = this.todos.filter(todo => !todo.isCompleted);\n    this.updateToLocalStorage();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}